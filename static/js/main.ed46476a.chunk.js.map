{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","buttonDisabled","setButtonDisabled","getJokes","a","joke","fetch","response","json","data","setup","delivery","tellJoke","console","log","cors","method","body","JSON","stringify","headers","then","res","blob","url","window","URL","createObjectURL","audio","Audio","src","play","onended","catch","err","className","onClick","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PA8DeA,MA3Df,WAAgB,IAAD,EAC+BC,oBAAS,GADxC,mBACNC,EADM,KACUC,EADV,KAGPC,EAAQ,uCAAG,gCAAAC,EAAA,6DACXC,EAAO,GACI,sGAFA,kBAIUC,MAFV,uGAFA,cAIPC,EAJO,gBAKMA,EAASC,OALf,OAKPC,EALO,OAOXJ,EADCI,EAAKC,MACF,UAAMD,EAAKC,MAAX,gBAAwBD,EAAKE,UAE1BF,EAAKJ,KAGdO,EAASP,GAETH,GAAkB,GAdL,kDAiBbW,QAAQC,IAAI,SAAZ,MAjBa,0DAAH,qDAqBRF,EAAW,SAACP,GAIhBC,MAAMS,qFAAiB,CACrBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBd,KAAMA,IAERe,QAAS,CAAC,eAAgB,sBAGzBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,IAAIC,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACrCE,OAAOG,MAAQ,IAAIC,MACnBJ,OAAOG,MAAME,IAAMN,EACnBC,OAAOG,MAAMG,OAEbN,OAAOG,MAAMI,QAAU,WACrB9B,GAAkB,OAGrB+B,OAAM,SAAAC,GACLrB,QAAQC,IAAIoB,OAIlB,OACE,yBAAKC,UAAU,aACb,4BAAQC,QAASjC,EAAUkC,SAAUpC,GAArC,oBC7CcqC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.ed46476a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const getJokes = async () => {\n    let joke = '';\n    const apiUrl = 'https://sv443.net/jokeapi/v2/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist';\n    try {\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n      if(data.setup) {\n        joke = `${data.setup} ... ${data.delivery}`;\n      } else {\n        joke = data.joke;\n      }\n      // Text-to-Speech\n      tellJoke(joke);\n      // Disable Button\n      setButtonDisabled(true);\n    } catch(error) {\n      // Catch Errors Here\n      console.log('whoops', error);\n    }\n  }\n\n  const tellJoke = (joke) => {\n    // const endpoint = 'http://localhost:8000';\n    const cors = 'https://young-journey-86731.herokuapp.com/';\n    const endpoint = 'https://fierce-wave-07352.herokuapp.com/';\n    fetch(cors + endpoint, {\n      method: 'post',\n      body: JSON.stringify({\n        joke: joke\n      }),\n      headers: {'Content-Type': 'application/json'},\n    })\n      // https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n      .then(res => res.blob())\n      .then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        window.audio = new Audio();\n        window.audio.src = url;\n        window.audio.play();\n        // https://stackoverflow.com/questions/57486312/detect-when-audio-play-has-finished\n        window.audio.onended = function() {\n          setButtonDisabled(false);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  return (\n    <div className=\"container\">\n      <button onClick={getJokes} disabled={buttonDisabled}>Tell Me A Joke</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}